import re
from datetime import datetime
from typing import List, Dict

def format_main_menu(user_data: Dict, queue_count: int, user_queue_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    username = user_data.get('username', 'Unknown')
    reputation = user_data.get('reputation', 10)
    status = user_data.get('status', 'work üü¢')
    
    menu = f"""Full Work | {username}
‚û£–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}
‚û¢–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–∞: {status}
‚ïì–û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å: {queue_count}
‚ïë
‚ïö–¢–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏: {user_queue_count}"""
    
    return menu

def format_numbers_list(numbers: List[Dict], title: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤"""
    if not numbers:
        return f"{title}\n\n–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤"
    
    result = f"{title}\n\n"
    for i, number_data in enumerate(numbers, 1):
        number = number_data['number']
        added_at = datetime.fromisoformat(number_data['added_at']).strftime("%H:%M:%S")
        result += f"{i}. {number} (–¥–æ–±–∞–≤–ª–µ–Ω: {added_at})\n"
    
    return result

def format_statistics(stats: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not stats:
        return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    result = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    for user in stats:
        username = user.get('username', 'Unknown')
        reputation = user.get('reputation', 10)
        queue_count = user.get('numbers_in_queue', 0)
        work_count = user.get('numbers_in_work', 0)
        successful_count = user.get('successful_numbers', 0)
        blocked_count = user.get('blocked_numbers', 0)
        
        result += f"üë§ {username}\n"
        result += f"   –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
        result += f"   –í –æ—á–µ—Ä–µ–¥–∏: {queue_count}\n"
        result += f"   –í —Ä–∞–±–æ—Ç–µ: {work_count}\n"
        result += f"   –£—Å–ø–µ—à–Ω—ã–µ: {successful_count}\n"
        result += f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {blocked_count}\n\n"
    
    return result

def validate_phone_number(number: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
    clean_number = re.sub(r'[\s\-\(\)\+]', '', number)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ –æ—Ç 10 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤
    if not clean_number.isdigit():
        return False
    
    if len(clean_number) < 10 or len(clean_number) > 15:
        return False
    
    return True

def format_phone_number(number: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
    clean_number = re.sub(r'[\s\-\(\)\+]', '', number)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    if len(clean_number) == 11 and clean_number.startswith('7'):
        return f"+7 ({clean_number[1:4]}) {clean_number[4:7]}-{clean_number[7:9]}-{clean_number[9:11]}"
    elif len(clean_number) == 10:
        return f"+7 ({clean_number[0:3]}) {clean_number[3:6]}-{clean_number[6:8]}-{clean_number[8:10]}"
    else:
        return clean_number

def format_code_message(number: str, code: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º"""
    formatted_number = format_phone_number(number)
    return f"""‚úÜ {formatted_number} –ó–ê–ü–†–û–° –ê–ö–¢–ò–í–ê–¶–ò–ò
 ‚å®  –û–∂–∏–¥–∞–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞
 ‚úé –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: 2 –º–∏–Ω—É—Ç—ã
‚úî–¢–í–û–ô –ö–û–î: {code}"""

def format_expired_message(number: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    formatted_number = format_phone_number(number)
    return f"""‚úé {formatted_number} –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""

def format_flight_report(number_data: Dict, flight_time: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–ª—ë—Ç–µ"""
    number = format_phone_number(number_data['number'])
    added_at = datetime.fromisoformat(number_data['added_at']).strftime("%H:%M:%S")
    
    return f"""üìä –û—Ç—á–µ—Ç –æ —Å–ª—ë—Ç–µ

–ù–æ–º–µ—Ä: {number}
–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {added_at}
–í—Ä–µ–º—è —Å–ª—ë—Ç–∞: {flight_time}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""